global proc shelf_RenderFarmTools () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Launch Render Farm Tool" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "RenderFarmSubmit" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Submit To Farm" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import os\nimport platform\nimport subprocess\nimport sys\nimport tempfile\n\nimport maya.cmds as cmds\nimport maya.OpenMayaAnim as OMA\nfrom PySide2 import QtCore, QtWidgets\nfrom shiboken2 import wrapInstance\n\n\ndef get_main_window():\n    \"\"\"this returns the maya main window for parenting\"\"\"\n    window = omui.MQtUtil.mainWindow()\n    return wrapInstance(int(window), QtWidgets.QDialog)\n\n\nclass RenderFarmSubmitDialog(QtWidgets.QDialog):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        # Move to Build mode\n        # Set the GUI components and layout\n        self.setWindowTitle(\"NCCA Renderfarm Submit Tool\")\n        self.resize(600, 280)\n        # Main layout for form\n        self.gridLayout = QtWidgets.QGridLayout(self)\n        self.home_dir=os.environ.get(\"HOME\")\n        self.user=os.environ.get(\"USER\")\n        time_line=OMA.MAnimControl()\n        # convert to int here, do we render non int frames?\n        self.min_frame=int(time_line.minTime().value())\n        self.max_frame=int(time_line.maxTime().value())\n        \n        # First row choose render and num cpus\n        row=0\n        label=QtWidgets.QLabel(\"Active Renderer\")\n        self.gridLayout.addWidget(label, row, 0, 1, 1)\n        self.active_renderer=QtWidgets.QComboBox()\n        self.active_renderer.addItems([\"file\",\"renderman\",\"vray\",\"arnold\",\"sw\",\"hw2\",\"default\"])\n        self.active_renderer.setToolTip(\"Choose the active renderer, note is file is chose it will use the one set in the maya file\")\n        self.gridLayout.addWidget(self.active_renderer, row, 1, 1, 2)\n        label=QtWidgets.QLabel(\"Numeber of CPUs\")\n        self.gridLayout.addWidget(label, row, 3, 1, 1)\n        \n        self.cpus=QtWidgets.QComboBox()\n        self.cpus.addItems([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"])\n        self.cpus.setCurrentIndex(1)\n        self.cpus.setToolTip(\"number of nodes to use, please be respectful of others and only use high numbers if farm is empty\")\n        self.gridLayout.addWidget(self.cpus, row, 4, 1, 1)\n        \n\n        # 2nd row project name \n        row+=1\n        label=QtWidgets.QLabel(\"Project Name\")\n        name=cmds.workspace(q=True,sn=True)\n        self.gridLayout.addWidget(label,row,0,1,1)\n        self.project_name = QtWidgets.QLineEdit(f\"{self.user}_{name}\", self)\n        self.project_name.setToolTip(\"This is the name of the project as it will appear on the Qube GUI\")\n        self.gridLayout.addWidget(self.project_name, row, 1, 1, 5)\n\n        # 3rd row camera selection\n        row+=1\n        label=QtWidgets.QLabel(\"Camera\")\n        self.gridLayout.addWidget(label,row,0,1,1)\n        self.camera = QtWidgets.QComboBox(self)\n        self.camera.addItems(cmds.listCameras( p=True ))\n        self.camera.setToolTip(\"select camera to render\")        \n        self.gridLayout.addWidget(self.camera, row, 1, 1, 5)\n\n        # 4th row frame selection\n        row+=2\n        label=QtWidgets.QLabel(\"Start Frame\")\n        self.gridLayout.addWidget(label,row,0,1,1)\n        self.start_frame=QtWidgets.QSpinBox()\n        self.start_frame.setToolTip(\"Start frame for rendering, set from ROP but can be changed here, this will override the ROP value on the farm\")\n        self.start_frame.setRange(self.min_frame,self.max_frame)\n        self.start_frame.setValue(self.min_frame)\n        self.gridLayout.addWidget(self.start_frame,row,1,1,1)\n        label=QtWidgets.QLabel(\"End Frame\")\n        self.gridLayout.addWidget(label,row,2,1,1)\n        self.end_frame=QtWidgets.QSpinBox()\n        self.end_frame.setRange(self.min_frame,self.max_frame)\n        self.end_frame.setValue(self.max_frame)\n        self.end_frame.setToolTip(\"End frame for rendering, set from ROP but can be changed here, this will override the ROP value on the farm\")\n        self.gridLayout.addWidget(self.end_frame,row,3,1,1)\n        label=QtWidgets.QLabel(\"By Frame\")\n        self.gridLayout.addWidget(label,row,4,1,1)\n        self.by_frame=QtWidgets.QSpinBox()\n        self.by_frame.setValue(1)\n        self.by_frame.setToolTip(\"Frame Step for rendering, set from ROP but can be changed here, this will override the ROP value on the farm\")\n        self.gridLayout.addWidget(self.by_frame,row,5,1,1)\n\n        # 5th row scene \n        row+=1\n        self.scene_button=QtWidgets.QPushButton(\"Scene File\")\n        self.scene_button.setToolTip(\"Select the file to render, not this must be on the farm mount\")\n        self.gridLayout.addWidget(self.scene_button,row,0,1,1)\n        self.scene_button.clicked.connect(self.set_scene_location)\n        try :\n            base_path=cmds.file(q=True, sn=True).split(\"/\")[-2]\n        except IndexError :\n            base_path=\"file not loaded\"\n        project_path=cmds.workspace(q=True,sn=True).split(\"/\")[-1]\n\n        location=f\"/render/{self.user}/{project_path}/{base_path}/{cmds.file(q=True, sn=True, shn=True)}\"\n        self.scene_location = QtWidgets.QLineEdit(location, self)\n        self.scene_location.setToolTip(\"\"\"This is the full path to the maya file on the farm, you can enter this manually or press the button to select.\n        If the farm is mounted on /render you can navigate to here and select the file. If not you must specify the full path and name manually. \n        If this is not correct the renders will fail\"\"\")\n        self.gridLayout.addWidget(self.scene_location, row, 1, 1, 5)\n\n        # 6th row project\n        row+=1\n        # Project location\n        self.project_button=QtWidgets.QPushButton(\"Project Location\")\n        self.project_button.setToolTip(\"Select the maya project for the scene\")\n        self.gridLayout.addWidget(self.project_button,row,0,1,1)\n        self.project_button.clicked.connect(self.set_project_location)\n        base_path=cmds.workspace(q=True,sn=True).split(\"/\")[-1]        \n        location=f\"/render/{self.user}/{base_path}/\"\n        self.project_location = QtWidgets.QLineEdit(location, self)\n        self.project_location.setToolTip(\"\"\"This is the full path to the maya project on the farm, you can enter this manually or press the button to select.\n        If the farm is mounted on /render you can navigate to here and select the file. If not you must specify the full path and name manually. \n        If this is not correct the renders will fail\"\"\")\n        self.gridLayout.addWidget(self.project_location, row, 1, 1, 5)\n\n\n        # 7th row output override output directory\n        row +=1 \n        self.override_output_dir = QtWidgets.QCheckBox(\"Set Output Directory\")\n        self.override_output_dir.setChecked(False)\n        self.gridLayout.addWidget(self.override_output_dir,row,0,1,1)\n        self.output_dir=QtWidgets.QLineEdit(f\"/render/{self.user}/output/\")\n        self.output_dir.setReadOnly(True)\n        self.override_output_dir.stateChanged.connect(lambda state : self.output_dir.setReadOnly(not state))\n        self.output_dir.setToolTip(\"this folder must be on the farm\")\n        self.gridLayout.addWidget(self.output_dir,row,1,1,1)\n        \n        # 8th row override output filename\n        row +=1 \n        self.override_filename = QtWidgets.QCheckBox(\"Output Filename\")\n        self.override_filename.setChecked(False)\n        self.gridLayout.addWidget(self.override_filename,row,0,1,1)\n        self.output_filename=QtWidgets.QLineEdit(f\"CustomFilename\")\n        self.output_filename.setReadOnly(True)\n        self.override_filename.stateChanged.connect(lambda state : self.output_filename.setReadOnly(not state))\n        self.output_filename.setToolTip(\"Override Filename in Render Globals\")\n        self.gridLayout.addWidget(self.output_filename,row,1,1,1)\n\n        # 9th row override extensions\n        row +=1 \n        self.override_extension = QtWidgets.QCheckBox(\"Output Format\")\n        self.override_extension.setChecked(False)\n        self.gridLayout.addWidget(self.override_extension,row,0,1,1)\n        self.output_extension=QtWidgets.QComboBox()\n        self.output_extension.addItems([\"exr\",\"png\",\"tif\",\"jpeg\",\"deepexr\",\"maya\"])\n        self.output_extension.setDisabled(True)\n        self.override_extension.stateChanged.connect(lambda state : self.output_extension.setDisabled(not state))\n        self.output_extension.setToolTip(\"Override image extension in Render Globals\")\n        self.gridLayout.addWidget(self.output_extension,row,1,1,1)\n\n        # 10th row add extra commands \n        row +=1 \n        label=QtWidgets.QLabel(\"Extra Commands\")\n        self.gridLayout.addWidget(label,row,0,1,1)\n        self.extra_commands=QtWidgets.QLineEdit()\n        self.extra_commands.setToolTip(\"This commands will be added verbatim to the Render call\")\n        self.gridLayout.addWidget(self.extra_commands,row,1,1,5)\n\n        # submit buttons\n        row+=1\n        self.Cancel = QtWidgets.QPushButton(\"Cancel\", self)\n        self.Cancel.setToolTip(\"Close the submit dialog\")\n        self.Cancel.clicked.connect(self.close)\n        self.gridLayout.addWidget(self.Cancel, row, 0, 1, 1)\n        # Write script button\n        self.export = QtWidgets.QPushButton(\"Export Script\", self)\n        self.export.setToolTip(\"Export Python Submit script\")\n        self.export.clicked.connect(self.export_script)\n        self.gridLayout.addWidget(self.export, row, 1,1, 1)\n        # Submit button\n        self.submit = QtWidgets.QPushButton(\"Submit\", self)\n        self.submit.pressed.connect(self.submit_job)\n        self.submit.setEnabled(True)\n        self.submit.setToolTip(\"Submit job to the farm, you must select a ROP before this will activate\")\n        self.gridLayout.addWidget(self.submit, row, 5, 1, 1)\n\n    def _generate_payload(self) :\n        ARNOLD_LOCATION='/opt/software/autodesk/arnold/maya2023'\n        MAYA_ROOT='/opt/software/autodesk/maya2023'\n        RFM_LOCATION='/opt/software/pixar/RenderManForMaya-24.4'\n        VRAY_LOCATION='/opt/software/autodesk/maya2023/vray'\n        RENDERMAN_LOCATION='/opt/software/pixar/RenderManProServer-24.4'\n        range=f\"{self.start_frame.value()}-{self.end_frame.value()}x{self.by_frame.value()}\"\n        set_output_dir=\"\"\n        if self.override_output_dir.isChecked() :\n            set_output_dir=f\"-rd {self.output_dir.text()}\"\n        \n        output_filename=\"\"\n        if self.override_filename.isChecked() :\n            output_filename=f\"-im {self.output_filename.text()}\"\n        \n        image_ext=\"\"\n        if self.override_extension.isChecked() :\n            image_ext=f\"-of {self.output_extension.currentText()}\"\n        \n        payload=f\"\"\"#!/usr/bin/python3 \nimport os\nimport sys\nsys.path.insert(0,\"/public/devel/2022/pfx/qube/api/python/\")\n\nimport qb\nif os.environ.get(\"QB_SUPERVISOR\") is None :\n    os.environ[\"QB_SUPERVISOR\"]=\"tete.bournemouth.ac.uk\"\n    os.environ[\"QB_DOMAIN\"]=\"ncca\"\n\n\njob = {{}}\njob['name'] = f\"{self.project_name.text()}\"\njob['prototype'] = 'cmdrange'\npackage = {{}}\npackage['shell']=\"/bin/bash\"\n\nrender_command=f\"Render -s QB_FRAME_NUMBER -e QB_FRAME_NUMBER -r {self.active_renderer.currentText()}  {set_output_dir} {output_filename} {image_ext}  -proj {self.project_location.text()}  -cam {self.camera.currentText()} {self.extra_commands.text()} {self.scene_location.text()} \"\n\n\npackage['cmdline']=f\"{{render_command}}\"\n        \njob['package'] = package\njob['cpus'] = 2\n\nenv={{\"HOME\" :f\"/render/{self.user}\",  \n        \"RMANTREE\":f\"{RENDERMAN_LOCATION}\",\n        \"PATH\":f\"{RENDERMAN_LOCATION}/bin:/usr/bin:/usr/sbin:{MAYA_ROOT}/bin/\",\n        \"MAYA_RENDER_DESC_PATH\" : f\"{RFM_LOCATION}/etc/:{ARNOLD_LOCATION}/:{VRAY_LOCATION}/rendererDesc/\",\n        \"PIXAR_LICENSE_FILE\":\"9010@talavera.bournemouth.ac.uk\",        \n        \"LD_LIBRARY_PATH\" : \"/usr/lib/:/usr/lib64:/render/jmacey/libs:{MAYA_ROOT}/lib/:/opt/software/vray_builds/vray/lib:\",\n        \"HOME\" : \"/render/{self.user}\",\n        \"MAYA_PLUG_IN_PATH\" : f\"{RFM_LOCATION}/plug-ins:{ARNOLD_LOCATION}/plug-ins/:{VRAY_LOCATION}/plug-ins\",\n        \"MAYA_SCRIPT_PATH\" : f\"{RFM_LOCATION}/scripts:{VRAY_LOCATION}/scripts\",\n        \"PYTHONPATH\" : f\"{ARNOLD_LOCATION}/scripts:{VRAY_LOCATION}/scripts\",\n        \"ADSKFLEX_LICENSE_FILE\" : \"@wrangle.bournemouth.ac.uk\",\n        \"RLM_LICENSE\" : \"5063@burton.bournemouth.ac.uk\", \n        \"VRAY_AUTH_CLIENT_FILE_PATH\" : \"/opt/software/\",\n        \"VRAY_OSL_PATH\" : \"{VRAY_LOCATION}/bin\",\n        \"VRAY_PLUGINS\" :\"{VRAY_LOCATION}/vrayplugins\",\n        \"VRAY_OSL_PATH_MAYA2023\":\"/opt/software/vray_builds/vray/opensl\",\n        \"VRAY_FOR_MAYA2023_MAIN\" : \"{VRAY_LOCATION}\",\n        \"VRAY_PATH\" : \"{VRAY_LOCATION}/bin\",\n        \"VRAY_FOR_MAYA2023_PLUGINS\" : \"{VRAY_LOCATION}/vrayplugins\"       \n         \n        }}\njob['env']=env\n\nagendaRange = f'{range}'  \nagenda = qb.genframes(agendaRange)\n\njob['agenda'] = agenda\n        \nlistOfJobsToSubmit = []\nlistOfJobsToSubmit.append(job)\nlistOfSubmittedJobs = qb.submit(listOfJobsToSubmit)\nid_list=[]\nfor job in listOfSubmittedJobs:\n    print(job['id'])\n    id_list.append(job['id'])\n\nprint(id_list)\n\"\"\"\n        return payload\n\n    def export_script(self) :\n        filename, _ = QtWidgets.QFileDialog.getSaveFileName(\n            self,\"Select Filename Name\",\"payload.py\",\n            (\"Python Files (*.py)\"))\n        if filename != \"\" :\n            payload=self._generate_payload()\n            with open(filename,\"w\") as file :\n                file.write(payload)\n\n\n    def submit_job(self) :\n        payload=self._generate_payload()\n        with tempfile.TemporaryDirectory() as tmpdirname:\n            with open(tmpdirname+\"/payload.py\",\"w\") as fp :\n                fp.write(payload)\n            output=subprocess.run([\"/usr/bin/python3\",f\"{tmpdirname}/payload.py\"],capture_output=True,env={})\n            j=output.stdout.decode(\"utf-8\") \n            print(j)            \n            #hou.ui.displayMessage(f\"Job submitted to Qube, ID's {j}\",buttons=(\"Ok\",),title=\"Job Submitted\")\n        self.done(0)\n    \n    \n    def set_scene_location(self) :\n        basicFilter = \"*.mb;*.ma\"\n        cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=1)\n        # work around for weird bug where window hides behind main one\n        self.raise_()            \n\n    def set_project_location(self) :\n        cmds.fileDialog2( dialogStyle=3)\n        # work around for weird bug where window hides behind main one\n        self.raise_()            \n\n\n        \nif os.environ.get(\"QB_SUPERVISOR\") is None :\n    os.environ[\"QB_SUPERVISOR\"]=\"tete.bournemouth.ac.uk\"\n    os.environ[\"QB_DOMAIN\"]=\"ncca\"\n\n\n# If we have a dialog open already close\ntry:\n    dialog.close()\n    dialog.deleteLater()\nexcept:\n    pass\n\ndialog = RenderFarmSubmitDialog()\ndialog.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "User Script" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Qube" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Qube" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import subprocess\nsubprocess.call(\"unset PYTHONHOME;  /public/bin/2022/goQube &\",shell=True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
